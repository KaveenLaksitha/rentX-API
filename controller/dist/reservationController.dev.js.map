{"version":3,"sources":["reservationController.js"],"names":["controller","require","Router","Reservation","uuidv4","v4","isMoment","route","post","req","res","reservationid","customername","body","contactnumber","Number","nic","customeraddress","packagename","eventtype","from","format","to","discount","advancedpayment","totalreservation","status","newReservation","save","then","send","message","err","error","get","find","reservation","json","console","log","RID","params","findOne","findOneAndDelete","put","updateReservation","findOneAndUpdate","updateReserve","module","exports"],"mappings":"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","sourcesContent":["const controller = require(\"express\").Router();\r\nlet Reservation = require(\"../model/reservationModel\");\r\nconst {v4:uuidv4} = require(\"uuid\");\r\nconst { Router } = require(\"express\");\r\nconst isMoment  = require(\"moment\");\r\n\r\n//insert data\r\ncontroller.route(\"/addReservation\").post((req,res)=>{\r\n    \r\n    const reservationid = uuidv4();\r\n    const customername = req.body.customername;\r\n    const contactnumber = Number(req.body.contactnumber);\r\n    const nic = req.body.nic;\r\n    const customeraddress = req.body.customeraddress;\r\n    const packagename = req.body.packagename;\r\n    const eventtype = req.body.eventtype;\r\n    const from = isMoment(req.body.from).format('MM-DD-YYYY');\r\n    const to = isMoment(req.body.to).format('MM-DD-YYYY');\r\n    const discount = Number(req.body.discount);\r\n    const advancedpayment = Number(req.body.advancedpayment);\r\n    const totalreservation = Number(req.body.totalreservation);\r\n    const status = req.body.status;\r\n\r\n    const newReservation = new Reservation({\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    })\r\n\r\n    newReservation.save().then(()=>{\r\n        res.status(200).send({message:\"Reservation insert successfully\"})\r\n    }).catch((err)=>{\r\n        res.status(300).send({status:\"Error Reservation insertion\",error: err.message});\r\n    })\r\n})\r\n\r\n//retrieve all order details\r\ncontroller.route(\"/displayReservation\").get((req,res) =>{\r\n    Reservation.find().then((reservation) => {\r\n        res.json(reservation)\r\n    }).catch((err)=>{\r\n        console.log(err);\r\n    })\r\n})\r\n\r\n\r\n//To retrieve the reservation details of a specific order \r\ncontroller.route(\"/getReservation/:RID\").get(async(req,res) => {\r\n\r\n    let RID = req.params.RID;\r\n\r\n    const reservation = await Reservation.findOne({reservationid : RID})\r\n    .then((reservation) =>{\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n            //res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n        }else{\r\n            res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n            //res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n        }       \r\n    }).catch((err) => {\r\n        console.log(err.message);\r\n        res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n    })\r\n\r\n})\r\n\r\n//to delete a specific reservation from database\r\ncontroller.route(\"/deleteReservation/:RID\").delete(async(req,res)=>{\r\n    let RID = req.params.RID; //Reservation ID taken from frontend\r\n\r\n    const reservation = await Reservation.findOneAndDelete({reservationid : RID})\r\n    .then((reservation)=> {\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation deleted\"})\r\n        }else{\r\n            res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n//to update the reservation details\r\ncontroller.route(\"/updateReservation/:RID\").put(async(req,res) => {\r\n    let RID = req.params.RID;\r\n\r\n    //we have to fetch the new updating details coming from the front end here-new feature called d structure\r\n\r\n    const {\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    } = req.body;//we call this as dStructure\r\n\r\n    const updateReservation ={\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    }//create a object containing the data that needs to be updated\r\n\r\n       //we have to pass the primary key and then value to be passed\r\n    const updateReserve = await Reservation.findOneAndUpdate({reservationid:RID},updateReservation)\r\n    .then((updateReserve)=> {\r\n        if(updateReserve != null){\r\n            res.status(200).send({status :\"Reservation updated\"})//sending details of the updated data back to front end\r\n        }else{\r\n            res.status(500).send({status : \"Error with updating Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n/*controller.route(\"/search\").post((req,res)=> {\r\n    let userpattern = new RegExp(\"^\"+req.body.query)\r\n    Reservation.find({contactnumber:{$regex:userpattern}})\r\n    .then(reservation => {\r\n        res.json({reservation})\r\n    }).catch(err => {\r\n        console.log(err)\r\n    })\r\n})*/\r\n\r\nmodule.exports = controller;"],"file":"reservationController.dev.js"}