{"version":3,"sources":["reservationController.js"],"names":["controller","require","Router","Reservation","Vehicles","route","post","req","res","reservationid","uuidv4","isMoment","body","customername","contactnumber","Number","nic","customernic","customeraddress","packagename","eventtype","format","discount","advancedpayment","status","from","totalreservation","newReservation","to","then","get","find","reservation","err","error","log","message","RID","params","findOne","send","console","findOneAndDelete","put","_req$body","updateReservation","regeneratorRuntime","async","_context3","prev","next","awrap","findOneAndUpdate","updateReserve","sent","stop","vType","trim","val","$options","vehicles","module","exports"],"mappings":"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","file":"reservationController.min.js","sourcesContent":["const controller = require(\"express\").Router();\r\nlet Reservation = require(\"../model/reservationModel\");\r\nconst {v4:uuidv4} = require(\"uuid\");\r\nconst { Router } = require(\"express\");\r\nconst isMoment  = require(\"moment\");\r\n\r\nlet Vehicles = require(\"../model/vehicleModel\");\r\n\r\n//insert data\r\ncontroller.route(\"/addReservation\").post((req,res)=>{\r\n    \r\n    const reservationid = uuidv4();\r\n    const customername = req.body.customername;\r\n    const contactnumber = Number(req.body.contactnumber);\r\n    const nic = req.body.nic;\r\n    const customernic = req.body.customernic;\r\n    const customeraddress = req.body.customeraddress;\r\n    const packagename = req.body.packagename;\r\n    const eventtype = req.body.eventtype;\r\n    const from = isMoment(req.body.from).format('MM-DD-YYYY');\r\n    const to = isMoment(req.body.to).format('MM-DD-YYYY');\r\n    const discount = Number(req.body.discount);\r\n    const advancedpayment = Number(req.body.advancedpayment);\r\n    const totalreservation = Number(req.body.totalreservation);\r\n    const status = req.body.status;\r\n\r\n    const newReservation = new Reservation({\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    })\r\n\r\n    newReservation.save().then(()=>{\r\n        res.status(200).send({message:\"Reservation insert successfully\"})\r\n    }).catch((err)=>{\r\n        res.status(300).send({status:\"Error Reservation insertion\",error: err.message});\r\n    })\r\n})\r\n\r\n//retrieve all order details\r\ncontroller.route(\"/displayReservation\").get((req,res) =>{\r\n    Reservation.find().then((reservation) => {\r\n        res.json(reservation)\r\n    }).catch((err)=>{\r\n        console.log(err);\r\n    })\r\n})\r\n\r\n\r\n//To retrieve the reservation details of a specific order \r\ncontroller.route(\"/getReservation/:RID\").get(async(req,res) => {\r\n\r\n    let RID = req.params.RID;\r\n\r\n    const reservation = await Reservation.findOne({reservationid : RID})\r\n    .then((reservation) =>{\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n            //res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n        }else{\r\n            res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n            //res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n        }       \r\n    }).catch((err) => {\r\n        console.log(err.message);\r\n        res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n    })\r\n\r\n})\r\n\r\n//to delete a specific reservation from database\r\ncontroller.route(\"/deleteReservation/:RID\").delete(async(req,res)=>{\r\n    let RID = req.params.RID; //Reservation ID taken from frontend\r\n\r\n    const reservation = await Reservation.findOneAndDelete({reservationid : RID})\r\n    .then((reservation)=> {\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation deleted\"})\r\n        }else{\r\n            res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n//to update the reservation details\r\ncontroller.route(\"/updateReservation/:RID\").put(async(req,res) => {\r\n    let RID = req.params.RID;\r\n\r\n    //we have to fetch the new updating details coming from the front end here-new feature called d structure\r\n\r\n    const {\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    } = req.body;//we call this as dStructure\r\n\r\n    const updateReservation ={\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    }//create a object containing the data that needs to be updated\r\n\r\n       //we have to pass the primary key and then value to be passed\r\n    const updateReserve = await Reservation.findOneAndUpdate({reservationid:RID},updateReservation)\r\n    .then((updateReserve)=> {\r\n        if(updateReserve != null){\r\n            res.status(200).send({status :\"Reservation updated\"})//sending details of the updated data back to front end\r\n        }else{\r\n            res.status(500).send({status : \"Error with updating Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n/*controller.route(\"/search\").post((req,res)=> {\r\n    let userpattern = new RegExp(\"^\"+req.body.query)\r\n    Reservation.find({contactnumber:{$regex:userpattern}})\r\n    .then(reservation => {\r\n        res.json({reservation})\r\n    }).catch(err => {\r\n        console.log(err)\r\n    })\r\n})*/\r\n\r\n\r\ncontroller.route(\"/searchVehicleModel/:vType\").get((req,res) => {\r\n\r\n    let val =req.params.vType.trim();\r\n \r\n     Vehicles.find({VehicleID :{$regex: \".*\" + val + \".*\", $options:'i'}}).then((vehicles) =>{\r\n         res.json(vehicles)\r\n \r\n     }).catch((err)=>{\r\n         console.log(err);\r\n     })\r\n \r\n })\r\n\r\n\r\nmodule.exports = controller;"]}