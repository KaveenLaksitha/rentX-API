{"version":3,"sources":["reservationController.js"],"names":["controller","require","Router","Reservation","route","post","req","res","reservationid","customername","body","isMoment","Number","contactnumber","nic","customernic","customeraddress","uuidv4","packagename","to","format","totalreservation","eventtype","discount","advancedpayment","status","newReservation","from","save","send","error","err","message","get","find","reservation","json","console","log","RID","regeneratorRuntime","async","_context","prev","next","awrap","findOne","then","sent","stop","_context2","params","findOneAndDelete","put","_req$body","updateReservation","_context3","findOneAndUpdate","updateReserve","module","exports"],"mappings":"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","file":"reservationController.min.js","sourcesContent":["const controller = require(\"express\").Router();\r\nlet Reservation = require(\"../model/reservationModel\");\r\nconst {v4:uuidv4} = require(\"uuid\");\r\nconst { Router } = require(\"express\");\r\nconst isMoment  = require(\"moment\");\r\n\r\n\r\n//insert data\r\ncontroller.route(\"/addReservation\").post((req,res)=>{\r\n    \r\n    const reservationid = uuidv4();\r\n    const customername = req.body.customername;\r\n    const contactnumber = Number(req.body.contactnumber);\r\n    const nic = req.body.nic;\r\n    const customernic = req.body.customernic;\r\n    const customeraddress = req.body.customeraddress;\r\n    const packagename = req.body.packagename;\r\n    const eventtype = req.body.eventtype;\r\n    const from = isMoment(req.body.from).format('MM-DD-YYYY');\r\n    const to = isMoment(req.body.to).format('MM-DD-YYYY');\r\n    const discount = Number(req.body.discount);\r\n    const advancedpayment = Number(req.body.advancedpayment);\r\n    const totalreservation = Number(req.body.totalreservation);\r\n    const status = req.body.status;\r\n\r\n    const newReservation = new Reservation({\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    })\r\n\r\n    newReservation.save().then(()=>{\r\n        res.status(200).send({message:\"Reservation insert successfully\"})\r\n    }).catch((err)=>{\r\n        res.status(300).send({status:\"Error Reservation insertion\",error: err.message});\r\n    })\r\n})\r\n\r\n//retrieve all order details\r\ncontroller.route(\"/displayReservation\").get((req,res) =>{\r\n    Reservation.find().then((reservation) => {\r\n        res.json(reservation)\r\n    }).catch((err)=>{\r\n        console.log(err);\r\n    })\r\n})\r\n\r\n\r\n//To retrieve the reservation details of a specific order \r\ncontroller.route(\"/getReservation/:RID\").get(async(req,res) => {\r\n\r\n    let RID = req.params.RID;\r\n\r\n    const reservation = await Reservation.findOne({reservationid : RID})\r\n    .then((reservation) =>{\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n            //res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n        }else{\r\n            res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n            //res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n        }       \r\n    }).catch((err) => {\r\n        console.log(err.message);\r\n        res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n    })\r\n\r\n})\r\n\r\n//to delete a specific reservation from database\r\ncontroller.route(\"/deleteReservation/:RID\").delete(async(req,res)=>{\r\n    let RID = req.params.RID; //Reservation ID taken from frontend\r\n\r\n    const reservation = await Reservation.findOneAndDelete({reservationid : RID})\r\n    .then((reservation)=> {\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation deleted\"})\r\n        }else{\r\n            res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n//to update the reservation details\r\ncontroller.route(\"/updateReservation/:RID\").put(async(req,res) => {\r\n    let RID = req.params.RID;\r\n\r\n    //we have to fetch the new updating details coming from the front end here-new feature called d structure\r\n\r\n    const {\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    } = req.body;//we call this as dStructure\r\n\r\n    const updateReservation ={\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customernic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    }//create a object containing the data that needs to be updated\r\n\r\n       //we have to pass the primary key and then value to be passed\r\n    const updateReserve = await Reservation.findOneAndUpdate({reservationid:RID},updateReservation)\r\n    .then((updateReserve)=> {\r\n        if(updateReserve != null){\r\n            res.status(200).send({status :\"Reservation updated\"})//sending details of the updated data back to front end\r\n        }else{\r\n            res.status(500).send({status : \"Error with updating Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n\r\n\r\nmodule.exports = controller;"]}