{"version":3,"sources":["reservationController.js"],"names":["controller","require","Router","Reservation","route","post","req","res","reservationid","uuidv4","customername","body","contactnumber","Number","isMoment","nic","customeraddress","packagename","eventtype","from","format","discount","advancedpayment","status","totalreservation","newReservation","then","get","find","reservation","err","error","log","message","RID","params","findOne","send","console","findOneAndDelete","put","_req$body","to","updateReservation","regeneratorRuntime","async","_context3","prev","next","awrap","findOneAndUpdate","updateReserve","sent","stop","module","exports"],"mappings":"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","file":"reservationController.min.js","sourcesContent":["const controller = require(\"express\").Router();\r\nlet Reservation = require(\"../model/reservationModel\");\r\nconst {v4:uuidv4} = require(\"uuid\");\r\nconst { Router } = require(\"express\");\r\nconst isMoment  = require(\"moment\");\r\n\r\n//insert data\r\ncontroller.route(\"/addReservation\").post((req,res)=>{\r\n    \r\n    const reservationid = uuidv4();\r\n    const customername = req.body.customername;\r\n    const contactnumber = Number(req.body.contactnumber);\r\n    const nic = req.body.nic;\r\n    const customeraddress = req.body.customeraddress;\r\n    const packagename = req.body.packagename;\r\n    const eventtype = req.body.eventtype;\r\n    const from = isMoment(req.body.from).format('MM-DD-YYYY');\r\n    const to = isMoment(req.body.to).format('MM-DD-YYYY');\r\n    const discount = Number(req.body.discount);\r\n    const advancedpayment = Number(req.body.advancedpayment);\r\n    const totalreservation = Number(req.body.totalreservation);\r\n    const status = req.body.status;\r\n\r\n    const newReservation = new Reservation({\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    })\r\n\r\n    newReservation.save().then(()=>{\r\n        res.status(200).send({message:\"Reservation insert successfully\"})\r\n    }).catch((err)=>{\r\n        res.status(300).send({status:\"Error Reservation insertion\",error: err.message});\r\n    })\r\n})\r\n\r\n//retrieve all order details\r\ncontroller.route(\"/displayReservation\").get((req,res) =>{\r\n    Reservation.find().then((reservation) => {\r\n        res.json(reservation)\r\n    }).catch((err)=>{\r\n        console.log(err);\r\n    })\r\n})\r\n\r\n\r\n//To retrieve the reservation details of a specific order \r\ncontroller.route(\"/getReservation/:RID\").get(async(req,res) => {\r\n\r\n    let RID = req.params.RID;\r\n\r\n    const reservation = await Reservation.findOne({reservationid : RID})\r\n    .then((reservation) =>{\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n            //res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n        }else{\r\n            res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n            //res.status(200).send({status :\"Reservation fetched\", reservation:reservation})\r\n        }       \r\n    }).catch((err) => {\r\n        console.log(err.message);\r\n        res.status(500).send({status : \"Error with get Reservation\", error:err.message});\r\n    })\r\n\r\n})\r\n\r\n//to delete a specific reservation from database\r\ncontroller.route(\"/deleteReservation/:RID\").delete(async(req,res)=>{\r\n    let RID = req.params.RID; //Reservation ID taken from frontend\r\n\r\n    const reservation = await Reservation.findOneAndDelete({reservationid : RID})\r\n    .then((reservation)=> {\r\n        if(reservation != null){\r\n            res.status(200).send({status :\"Reservation deleted\"})\r\n        }else{\r\n            res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n//to update the reservation details\r\ncontroller.route(\"/updateReservation/:RID\").put(async(req,res) => {\r\n    let RID = req.params.RID;\r\n\r\n    //we have to fetch the new updating details coming from the front end here-new feature called d structure\r\n\r\n    const {\r\n        reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    } = req.body;//we call this as dStructure\r\n\r\n    const updateReservation ={\r\n        //reservationid,\r\n        customername,\r\n        contactnumber,\r\n        nic,\r\n        customeraddress,\r\n        packagename,\r\n        eventtype,\r\n        from,\r\n        to,\r\n        discount,\r\n        advancedpayment,\r\n        totalreservation,\r\n        status\r\n    }//create a object containing the data that needs to be updated\r\n\r\n       //we have to pass the primary key and then value to be passed\r\n    const updateReserve = await Reservation.findOneAndUpdate({reservationid:RID},updateReservation)\r\n    .then((updateReserve)=> {\r\n        if(updateReserve != null){\r\n            res.status(200).send({status :\"Reservation updated\"})//sending details of the updated data back to front end\r\n        }else{\r\n            res.status(500).send({status : \"Error with updating Reservation\", error:err.message});\r\n        }   \r\n    }).catch((err)=>{\r\n        console.log(err);\r\n        res.status(500).send({status : \"Error with delete Reservation\", error:err.message});\r\n    })\r\n})\r\n\r\n/*controller.route(\"/search\").post((req,res)=> {\r\n    let userpattern = new RegExp(\"^\"+req.body.query)\r\n    Reservation.find({contactnumber:{$regex:userpattern}})\r\n    .then(reservation => {\r\n        res.json({reservation})\r\n    }).catch(err => {\r\n        console.log(err)\r\n    })\r\n})*/\r\n\r\nmodule.exports = controller;"]}